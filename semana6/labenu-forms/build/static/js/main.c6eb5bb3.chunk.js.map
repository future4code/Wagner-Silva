{"version":3,"sources":["components/Botao.js","components/Pergunta.js","components/DadosGerais.js","App.js","serviceWorker.js","index.js"],"names":["ContainerBotao","styled","button","Botao","onClick","this","props","texto","Component","ContainerPergunta","div","InputPergunta","pergunta","tipo","value","valor","onChange","opcoes","map","opcao","index","key","ContainerFormulario","section","ContainerPerguntas","DadosGerais","onChangeNome","event","setState","valorInputNome","target","onChangeIdade","valorInputIdade","onChangeEmail","valorInputEmail","onChangeEscolaridade","valorInputEscolaridade","state","proximaEtapa","Container","App","idEtapa","etapaAtual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+cAGA,IAAMA,EAAiBC,IAAOC,OAAV,KASCC,E,uKAEb,OAAO,kBAACH,EAAD,CAAgBI,QAASC,KAAKC,MAAMF,SAAUC,KAAKC,MAAMC,W,GAFrCC,a,yNCTnC,IAAMC,EAAoBR,IAAOS,IAAV,KAUFC,E,uKAEb,OACI,kBAACF,EAAD,KACI,2BAAIJ,KAAKC,MAAMM,UACdP,KAAKC,MAAMO,MAA4B,YAApBR,KAAKC,MAAMO,KAC3B,4BAAQC,MAAOT,KAAKC,MAAMS,MAAOC,SAAUX,KAAKC,MAAMU,UAAWX,KAAKC,MAAMW,OAAOC,KAAI,SAACC,EAAOC,GAAY,OAAO,4BAAQC,IAAKD,EAAON,MAAOK,GAAQA,OACrJ,2BAAOH,SAAUX,KAAKC,MAAMU,gB,GAPLR,a,kdCN3C,IAAMc,EAAsBrB,IAAOsB,QAAV,KAUnBC,EAAqBvB,IAAOS,IAAV,KAUHe,E,kDACjB,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IAUVoB,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,eAAgBF,EAAMG,OAAOhB,SAblB,EAiBnBiB,cAAgB,SAACJ,GACb,EAAKC,SAAS,CACVI,gBAAiBL,EAAMG,OAAOhB,SAnBnB,EAuBnBmB,cAAgB,SAACN,GACb,EAAKC,SAAS,CACVM,gBAAiBP,EAAMG,OAAOhB,SAzBnB,EA6BnBqB,qBAAuB,SAACR,GACpB,EAAKC,SAAS,CACVQ,uBAAwBT,EAAMG,OAAOhB,SA5BzC,EAAKuB,MAAQ,CACTR,eAAgB,GAChBG,gBAAiB,GACjBE,gBAAiB,GACjBE,uBAAwB,IAPb,E,qDAoCf,OACI,kBAACd,EAAD,KACI,4CACA,kBAACE,EAAD,KACI,kBAAC,EAAD,CACIZ,SAAU,uBACVI,SAAUX,KAAKqB,eAEnB,kBAAC,EAAD,CACId,SAAU,wBACVI,SAAUX,KAAK0B,gBAEnB,kBAAC,EAAD,CACInB,SAAU,wBACVI,SAAUX,KAAK4B,gBAEnB,kBAAC,EAAD,CACIrB,SAAU,+BACVC,KAAM,UACNI,OAAQ,CACJ,6BACA,2BACA,6BACA,4BAEJF,MAAOV,KAAKgC,MAAMD,uBAClBpB,SAAUX,KAAK8B,wBAGvB,kBAAC,EAAD,CACI/B,QAASC,KAAKC,MAAMgC,aACpB/B,MAAO,oB,GApEcC,a,uMCrBzC,IAAM+B,EAAYtC,IAAOS,IAAV,KASM8B,E,kDACnB,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAED+B,MAAQ,CACXI,QAAS,EACTC,WAAY,gBALG,E,qDASjB,OACE,kBAACH,EAAD,KACE,kBAAC,EAAD,W,GAZyB/B,aCHbmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6eb5bb3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst ContainerBotao = styled.button`\n    width: 30%;\n    height: 5%;\n    background-color: blue;\n    border-radius: 5px;\n    color: white;\n    border: none;\n`\n\nexport default class Botao extends Component {\n    render() {\n        return <ContainerBotao onClick={this.props.onClick}>{this.props.texto}</ContainerBotao>;\n    }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst ContainerPergunta = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    flex-direction: column;\n    width: 50%;\n    height: 10%;\n`\n\n\nexport default class InputPergunta extends Component {\n    render() {\n        return (\n            <ContainerPergunta>\n                <p>{this.props.pergunta}</p>\n                {this.props.tipo && this.props.tipo === \"selecao\" ?\n                    <select value={this.props.valor} onChange={this.props.onChange}>{this.props.opcoes.map((opcao, index) => { return <option key={index} value={opcao}>{opcao}</option> })}</select> :\n                    <input onChange={this.props.onChange} />\n                }\n            </ContainerPergunta>\n        )\n    }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Botao from './Botao';\nimport Pergunta from './Pergunta';\n\n\nconst ContainerFormulario = styled.section`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    width: 30%;\n    height: 70%;\n    border: 1px solid black;\n`\n\nconst ContainerPerguntas = styled.div`\n    display: flex;\n    width: 100%;\n    height: 50%;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\n\n\nexport default class DadosGerais extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            valorInputNome: '',\n            valorInputIdade: '',\n            valorInputEmail: '',\n            valorInputEscolaridade: ''\n        }\n    }\n\n    onChangeNome = (event) => {\n        this.setState({\n            valorInputNome: event.target.value\n        });\n    }\n\n    onChangeIdade = (event) => {\n        this.setState({\n            valorInputIdade: event.target.value\n        });\n    }\n\n    onChangeEmail = (event) => {\n        this.setState({\n            valorInputEmail: event.target.value\n        })\n    }\n\n    onChangeEscolaridade = (event) => {\n        this.setState({\n            valorInputEscolaridade: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <ContainerFormulario>\n                <h3>DADOS GERAIS</h3>\n                <ContainerPerguntas>\n                    <Pergunta \n                        pergunta={\"1- Qual o seu nome ?\"}\n                        onChange={this.onChangeNome}\n                    />\n                    <Pergunta \n                        pergunta={\"2- Qual a sua idade ?\"}\n                        onChange={this.onChangeIdade}\n                    />\n                    <Pergunta \n                        pergunta={\"3- Qual o seu email ?\"}\n                        onChange={this.onChangeEmail}\n                    />\n                    <Pergunta \n                        pergunta={\"4- Qual a sua escolaridade ?\"}\n                        tipo={\"selecao\"}\n                        opcoes={[\n                            \"Ensino Médio Incompleto\",\n                            \"Ensino Médio Completo\",\n                            \"Ensino Superior Incompleto\",\n                            \"Ensino Superior Completo\"\n                        ]}\n                        valor={this.state.valorInputEscolaridade}\n                        onChange={this.onChangeEscolaridade}\n                    />\n                </ContainerPerguntas>\n                <Botao\n                    onClick={this.props.proximaEtapa}\n                    texto={\"Prosseguir\"}\n                >\n                </Botao>\n            </ContainerFormulario>\n        );\n    }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport DadosGerais from './components/DadosGerais';\n\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  text-align: center;\n`\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      idEtapa: 1,\n      etapaAtual: \"dados-gerais\"\n    }\n  }\n  render() {\n    return (\n      <Container>\n        <DadosGerais />\n      </Container>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}