{"version":3,"sources":["components/Post.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","post","text","onClick","toggleLike","id","data-testid","liked","deletePost","App","useState","postsList","setPostsList","inputValue","setInputValue","mostrarAviso","setMostrarAviso","postId","newPostsList","filter","map","type","onChange","event","target","value","placeholder","Date","now","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAEaA,G,MAAO,SAAAC,GAClB,OACE,yBAAKC,UAAW,kBACd,2BAAID,EAAME,KAAKC,MACf,4BACEC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAME,KAAKI,KAC3CC,cAAa,eAEZP,EAAME,KAAKM,MAAQ,YAAc,UAEpC,4BAAQJ,QAAS,kBAAMJ,EAAMS,WAAWT,EAAME,KAAKI,MAAnD,aC0ESI,EAlFH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTC,EADS,KACEC,EADF,OAEoBF,mBAAS,IAF7B,mBAETG,EAFS,KAEGC,EAFH,OAGwBJ,oBAAS,GAHjC,mBAGTK,EAHS,KAGKC,EAHL,KA4BVR,EAAa,SAAAS,GAEjB,IAAMC,EAAeP,EAAUQ,QAAO,SAAAlB,GACpC,OAAOgB,IAAWhB,EAAKI,MAGzBO,EAAaM,IAGTd,EAAa,SAAAa,GAEjB,IAAMC,EAAeP,EAAUS,KAAI,SAAAnB,GACjC,OAAIgB,IAAWhB,EAAKI,GACJ,2BACTJ,GADS,IAEZM,OAAQN,EAAKM,QAIRN,KAIXW,EAAaM,IAGf,OACE,yBAAKlB,UAAU,OACb,6BACE,2BACEqB,KAAK,OACLC,SAtDc,SAAAC,GACpBT,EAAcS,EAAMC,OAAOC,QAsDrBA,MAAOZ,EACPa,YAAa,cAEf,4BAAQvB,QAtDE,WACd,GAAkB,KAAfU,EACDG,GAAgB,OACX,CACLA,GAAgB,GAEhB,IAMME,EAAY,CANF,CACdb,GAAIsB,KAAKC,MACT1B,KAAMW,EACNN,OAAO,IAGS,mBAAgBI,IAElCC,EAAaM,GACbJ,EAAc,OAuCZ,cAEF,6BACCC,EAAe,0DAAqC,KACpDJ,EAAUkB,OAAS,qDAA2BlB,EAAUkB,OAArC,KAAoD,KACvElB,EAAUkB,OAASlB,EAAUS,KAAI,SAAAnB,GAChC,OACE,kBAAC,EAAD,CACE6B,IAAK7B,EAAKI,GACVJ,KAAMA,EACNG,WAAYA,EACZI,WAAYA,OAGb,gBCrESuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.68bd1d3c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Post = props => {\n  return (\n    <div className={\"post-container\"}>\n      <p>{props.post.text}</p>\n      <button\n        onClick={() => props.toggleLike(props.post.id)}\n        data-testid={\"like-button\"}\n      >\n        {props.post.liked ? \"Descurtir\" : \"Curtir\"}\n      </button>\n      <button onClick={() => props.deletePost(props.post.id)}>Apagar</button>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Post } from \"./components/Post\";\n\nconst App = () => {\n  const [postsList, setPostsList] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [mostrarAviso, setMostrarAviso] = useState(false);\n\n  const onChangeInput = event => {\n    setInputValue(event.target.value);\n  };\n\n  const addPost = () => {\n    if(inputValue === '') {\n      setMostrarAviso(true);\n    } else {\n      setMostrarAviso(false);\n      // Adiciona um post Ã  lista\n      const newPost = {\n        id: Date.now(),\n        text: inputValue,\n        liked: false\n      };\n  \n      const newPostsList = [newPost, ...postsList];\n  \n      setPostsList(newPostsList);\n      setInputValue('');\n    }\n  };\n\n  const deletePost = postId => {\n    // Apaga um post da lista\n    const newPostsList = postsList.filter(post => {\n      return postId !== post.id;\n    });\n\n    setPostsList(newPostsList);\n  };\n\n  const toggleLike = postId => {\n    // Altera o status de curtida de um post da lista\n    const newPostsList = postsList.map(post => {\n      if (postId === post.id) {\n        const novoPost = {\n          ...post,\n          liked: !post.liked\n        };\n        return novoPost;\n      } else {\n        return post;\n      }\n    });\n\n    setPostsList(newPostsList);\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <input\n          type=\"text\"\n          onChange={onChangeInput}\n          value={inputValue}\n          placeholder={\"Novo post\"}\n        />\n        <button onClick={addPost}>Adicionar</button>\n      </div>\n      <br />\n      {mostrarAviso ? <p>Digite um texto para o post</p> : null}\n      {postsList.length ? <p>`Quantidade de posts: ${postsList.length}`</p> : null}\n      {postsList.length ? postsList.map(post => {\n        return (\n          <Post\n            key={post.id}\n            post={post}\n            toggleLike={toggleLike}\n            deletePost={deletePost}\n          />\n        );\n      }) : \"Nenhum post\"}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}